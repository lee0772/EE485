#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

#define FALSE 0
#define TRUE 1

int
main (void){

  int i, pid;
  char *token, command[2000], *arguments[10];

  while(TRUE){
    // clear command buffer and read commmand  
    memset(command, 0, sizeof(command));
    fgets(command, sizeof(command), stdin);

    // add str end
    command[strlen(command)-1] = 0;

    // store command in argv[0]. If no command, exit -1
    token = strtok(command," ");
    if (token == NULL) {exit(-1);}
    if (strcmp(token, "exit")) exit(0);
    arguments[0] = token;
    printf(token);

    // add parameters into arg
    for (i = 1; i < 10; i++) {
      token = strtok(NULL, " ");
      if(token ==NULL) break;
      arguments[i] = token;
    }
  
    // set the last point
    arguments[i] = NULL;

    // fork and get pid
    pid = fork();

  
    if (pid != 0){    // parents process (shell)
      wait(NULL);
    } else {          // child process that actually run the command
      execvp(arguments[0], arguments);
    }
  }
  return 0;
}
